apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup-database-table
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 10  # This sets the TTL for the job after completion
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: remove-database
              image: {{ $.Values.hs.database.image }}
              imagePullPolicy: IfNotPresent
              env:
                - name: HS_DB_USERNAME
                  value: "{{ .Values.hs.database.username }}"
                - name: HS_DB_PASSWORD
                  value: "{{ .Values.hs.database.password }}"
                - name: HS_DB_HOSTNAME
                  value: "{{ .Values.hs.database.hostname }}"
                - name: HS_DB_PORT
                  value: "{{ .Values.hs.database.port }}"
                - name: HS_DB_QUERY
                  value: "{{ .Values.hs.database.query }}"
              command: ["sh", "-c"]
              args:
                - |
                  for table_to_delete in $(psql "postgres://$HS_DB_USERNAME:$HS_DB_PASSWORD@$HS_DB_HOSTNAME:$HS_DB_PORT/gorizond_truncate?$HS_DB_QUERY" -c "SELECT id FROM table_to_delete;"); do
                    echo "Dropping database: $table_to_delete"
                    psql "postgres://$HS_DB_USERNAME:$HS_DB_PASSWORD@$HS_DB_HOSTNAME:$HS_DB_PORT/gorizond_truncate?$HS_DB_QUERY" -c "DROP DATABASE IF EXISTS $table_to_delete;"
                    if [ $? -eq 0 ]; then
                      echo "Successfully dropped database: $table_to_delete"
                      psql "postgres://$HS_DB_USERNAME:$HS_DB_PASSWORD@$HS_DB_HOSTNAME:$HS_DB_PORT/gorizond_truncate?$HS_DB_QUERY" -c "DELETE FROM table_to_delete WHERE id = '$table_to_delete';"
                    else
                      echo "Failed to drop database: $table_to_delete. "
                    fi
                  done